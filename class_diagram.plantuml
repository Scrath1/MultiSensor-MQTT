@startuml
interface Filesystem{
    + Filesystem()
    + RC_t openFile(const char filename[], OpenMode_t openMode)
    + bool hasOpenFile()
    + RC_t closeFile()
    + RC_t write(const uint8_t* data, uint32_t n)
    + RC_t flush()
    + RC_t read(uint8_t* data, uint32_t n)
    + RC_t readUntil(uint8_t* data, uint32_t n, uint8_t end)
    + bool eof()
    + bool fileExists(const char filename[])
    + RC_t deleteFile(const char filename[])
}
class LittleFilesystem
class DesktopFilesystem
Filesystem <|-- LittleFilesystem
Filesystem <|-- DesktopFilesystem

interface Transformer{
    # std::shared_ptr<Transformer> m_next
    + uint32_t applyTransformations(uint32_t input)
    # uint32_t transform(uint32_t input)
}
class SimpleMovingAverageFilter{
    - uint32_t m_bufferSize
    - uint16_t* m_averageBuffer
    - uint32_t m_nextBufferPosition
    - bool m_bufferInitialized
    + SimpleMovingAverageFilter(uint32_t n, std::shared_ptr<Transformer> next)
}
Transformer <|-- SimpleMovingAverageFilter
class Remapper{
    - uint32_t m_inMin, m_inMax, m_outMin, m_outMax
    + Remapper(uint32_t inMin, uint32_t inMax, uint32_t outMin, uint32_t outMax,
             std::shared_ptr<Transformer> next = std::shared_ptr<Transformer>()
}
Transformer <|-- Remapper

abstract class Sensor{
    # std::shared_ptr<Transformer> m_transformer
    + Sensor(std::shared_ptr<Transformer> transformer)
    + uint16_t readSensor()
    # readSensorRaw()
}
class ADCSensor{
    - m_adcPin
    + ADCSensor(uint32_t pin, std::shared_ptr<Transformer> transformer)
}
Sensor <|-- ADCSensor
Sensor o-- Transformer

class SensorFactory{
    {static} Sensor* createADCSensor(uint32_t pin, std::shared_ptr<Transformer> transformer)
}
SensorFactory <-- ADCSensor
@enduml